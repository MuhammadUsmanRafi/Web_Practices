// @import "variables";

// body {
//     font-family: $myFont;
//     font-size: $myFontSize;
//     color: $myColor;
// }

// #container {
//     width: $myWidth
// }
// global variables
// $myColor: rgb(213, 77, 204);

// h1 {
//   $myColor: rgb(89, 152, 86) !global;
//   color: $myColor;
// }

// p {
//   color: $myColor;
// }   
// nav {
//     ul {
//       margin: 0;
//       padding: 0;
//       list-style: none;
//     }
//     li {
//       display: inline-block;
//     }
//     a {
//       display: block;
//       padding: 6px 12px;
//       text-decoration: none;
//     }
//   }
//mixin
// @mixin important-text($color,$font-size) {
//   font-weight: bold;
//   border: 1px solid blue;
// }
// .danger {
//   @include important-text(red,25px);
//   background-color: green;
// }
//extends
// .button-basic  {
//   border: none;
//   padding: 15px 30px;
//   text-align: center;
//   font-size: 20px;
//   cursor: pointer;
// }

// .button-report  {
//   @extend .button-basic;
//   background-color: red;
// }

// .button-submit  {
//   @extend .button-basic;
//   background-color: rgb(189, 57, 215);
//   color: rgb(240, 232, 232);
// }
//SASS Operations
// Define variables
// $width: 100px;
// $padding: 10px;

// Addition
// .element {
//   width: $width + $padding;
// }

// Subtraction
// .element {
//   margin-right: $width - $padding;
// }

// Multiplication
// .element {
//   height: $width * 2;
// }

// Division
// .element {
//   font-size: $width / 2;
// }


//sass functions
// Math Functions
// $sum: add(5, 10);
// $difference: subtract(20, 7);
// $product: multiply(8, 4);
// $quotient: divide(50, 2);

// Color Functions
// $color: #db6934;
// $lighter: lighten($color, 20%);
// $darker: darken($color, 20%);
// $saturated: saturate($color, 20%);
// $desaturated: desaturate($color, 20%);
// $hueAdjusted: adjust-hue($color, 30deg);
// $complementColor: complement($color);
// $invertedColor: invert(rgba(255, 255, 255, 0.938));
// $mixedColor: mix($color, #e74c3c, 50%);

// String Functions
// $string: "Hello, World!";
// $quotedString: quote($string);
// $unquotedString: unquote($quotedString);
// $stringLength: str-length($string);
// $uppercaseString: to-upper-case($string);
// $lowercaseString: to-lower-case($string);
// $insertedString: str-insert($string, " beautiful", 6);

// List Functions
// $list1: (1, 2, 3);
// $list2: (4, 5, 6);
// $joinedList: join($list1, $list2, comma);
// $appendedList: append($list1, 7, space);
// $nthItem: nth($list1, 2);
// $lengthOfList: length($list1);
// $zippedList: zip($list1, $list2);

// Map Functions
// $map1: (key1: value1, key2: value2);
// $map2: (key3: value3, key4: value4);
// $valueByKey: map-get($map1, key1);
// $mergedMap: map-merge($map1, $map2);
// $removedKeyMap: map-remove($map1, key1);
// $mapKeys: map-keys($map1);
// $mapValues: map-values($map1);

// Control Flow Functions
// $condition: true;
// $result: if($condition, "True Result", "False Result");
// $featureExistence: feature-exists("global-variable-shadowing");

// Miscellaneous Functions
// $unitlessValue: 0.75;
// $percentageValue: percentage($unitlessValue);
// $roundedNumber: round(3.75);
// $ceiledNumber: ceil(3.25);
// $flooredNumber: floor(3.75);
// $absoluteValue: abs(-5);

// Apply styles using the calculated values
// .element {
//   background-color: $color;
//   color: $invertedColor;
//   padding: $ceiledNumber * 10px;
//   margin: $flooredNumber * 5px;
//   font-size: $absoluteValue * 2px;
// }


//SASS conditional directives
//if directive
$theme: light;

body {
  @if $theme==light {
    background-color: #fff;
    color: #333;
  }

  @else {
    background-color: #333;
    color: #fff;
  }
}

//else and if else if 
$grades: 75;

@if $grades>90 {
  .result {
    color: green;
  }
}

@else if $grades>70 {
  .result {
    color: yellow;
  }
}

@else {
  .result {
    color: red;
  }
}

//for directives
@for $i from 1 through 3 {
  .item-#{$i} {
    width: 100px * $i;
  }
}

//each directives
$colors: red, green, blue;

@each $color in $colors {
  .box-#{$color} {
    background-color: $color;
  }
}

//while directives
$i: 1;
@while $i < 4 {
  .item-#{$i} {
    width: 50px* $i;
  }
  $i: $i + 1;
}

//mixin directive with content
@mixin theme($theme) {
  @if $theme == light {
    background-color: #fff;
    color: #333;
  } @else {
    background-color: #333;
    color: #fff;
  }
}
body {
  @include theme(light)
}
.header {
  @include theme (dark)
}